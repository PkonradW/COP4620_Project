// Generated from java-escape by ANTLR 4.11.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class LittleLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		IDENTIFIER=1, INTLITERAL=2, FLOATLITERAL=3, STRINGLITERAL=4, COMMENT=5, 
		KEYWORDS=6, OP=7, WS=8;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"IDENTIFIER", "INTLITERAL", "FLOATLITERAL", "STRINGLITERAL", "COMMENT", 
			"KEYWORDS", "OP", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "IDENTIFIER", "INTLITERAL", "FLOATLITERAL", "STRINGLITERAL", "COMMENT", 
			"KEYWORDS", "OP", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public LittleLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Little.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\b\u00b4\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0001\u0000\u0001\u0000\u0005\u0000\u0014\b\u0000\n\u0000"+
		"\f\u0000\u0017\t\u0000\u0001\u0001\u0004\u0001\u001a\b\u0001\u000b\u0001"+
		"\f\u0001\u001b\u0001\u0002\u0004\u0002\u001f\b\u0002\u000b\u0002\f\u0002"+
		" \u0001\u0002\u0001\u0002\u0004\u0002%\b\u0002\u000b\u0002\f\u0002&\u0001"+
		"\u0002\u0001\u0002\u0004\u0002+\b\u0002\u000b\u0002\f\u0002,\u0003\u0002"+
		"/\b\u0002\u0001\u0003\u0001\u0003\u0005\u00033\b\u0003\n\u0003\f\u0003"+
		"6\t\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0005\u0004>\b\u0004\n\u0004\f\u0004A\t\u0004\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0003\u0005\u00a0\b\u0005\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0003\u0006\u00ac\b\u0006\u0001\u0007\u0004\u0007"+
		"\u00af\b\u0007\u000b\u0007\f\u0007\u00b0\u0001\u0007\u0001\u0007\u0000"+
		"\u0000\b\u0001\u0001\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b"+
		"\u0006\r\u0007\u000f\b\u0001\u0000\b\u0002\u0000AZaz\u0003\u000009AZa"+
		"z\u0001\u000009\u0001\u0000\"\"\u0002\u0000\n\n\r\r\u0004\u0000*+--//"+
		"==\u0004\u0000(),,;<>>\u0003\u0000\t\n\r\r  \u00d2\u0000\u0001\u0001\u0000"+
		"\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000"+
		"\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000"+
		"\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000"+
		"\u0000\u000f\u0001\u0000\u0000\u0000\u0001\u0011\u0001\u0000\u0000\u0000"+
		"\u0003\u0019\u0001\u0000\u0000\u0000\u0005.\u0001\u0000\u0000\u0000\u0007"+
		"0\u0001\u0000\u0000\u0000\t9\u0001\u0000\u0000\u0000\u000b\u009f\u0001"+
		"\u0000\u0000\u0000\r\u00ab\u0001\u0000\u0000\u0000\u000f\u00ae\u0001\u0000"+
		"\u0000\u0000\u0011\u0015\u0007\u0000\u0000\u0000\u0012\u0014\u0007\u0001"+
		"\u0000\u0000\u0013\u0012\u0001\u0000\u0000\u0000\u0014\u0017\u0001\u0000"+
		"\u0000\u0000\u0015\u0013\u0001\u0000\u0000\u0000\u0015\u0016\u0001\u0000"+
		"\u0000\u0000\u0016\u0002\u0001\u0000\u0000\u0000\u0017\u0015\u0001\u0000"+
		"\u0000\u0000\u0018\u001a\u0007\u0002\u0000\u0000\u0019\u0018\u0001\u0000"+
		"\u0000\u0000\u001a\u001b\u0001\u0000\u0000\u0000\u001b\u0019\u0001\u0000"+
		"\u0000\u0000\u001b\u001c\u0001\u0000\u0000\u0000\u001c\u0004\u0001\u0000"+
		"\u0000\u0000\u001d\u001f\u0007\u0002\u0000\u0000\u001e\u001d\u0001\u0000"+
		"\u0000\u0000\u001f \u0001\u0000\u0000\u0000 \u001e\u0001\u0000\u0000\u0000"+
		" !\u0001\u0000\u0000\u0000!\"\u0001\u0000\u0000\u0000\"$\u0005.\u0000"+
		"\u0000#%\u0007\u0002\u0000\u0000$#\u0001\u0000\u0000\u0000%&\u0001\u0000"+
		"\u0000\u0000&$\u0001\u0000\u0000\u0000&\'\u0001\u0000\u0000\u0000\'/\u0001"+
		"\u0000\u0000\u0000(*\u0005.\u0000\u0000)+\u0007\u0002\u0000\u0000*)\u0001"+
		"\u0000\u0000\u0000+,\u0001\u0000\u0000\u0000,*\u0001\u0000\u0000\u0000"+
		",-\u0001\u0000\u0000\u0000-/\u0001\u0000\u0000\u0000.\u001e\u0001\u0000"+
		"\u0000\u0000.(\u0001\u0000\u0000\u0000/\u0006\u0001\u0000\u0000\u0000"+
		"04\u0005\"\u0000\u000013\b\u0003\u0000\u000021\u0001\u0000\u0000\u0000"+
		"36\u0001\u0000\u0000\u000042\u0001\u0000\u0000\u000045\u0001\u0000\u0000"+
		"\u000057\u0001\u0000\u0000\u000064\u0001\u0000\u0000\u000078\u0005\"\u0000"+
		"\u00008\b\u0001\u0000\u0000\u00009:\u0005-\u0000\u0000:;\u0005-\u0000"+
		"\u0000;?\u0001\u0000\u0000\u0000<>\b\u0004\u0000\u0000=<\u0001\u0000\u0000"+
		"\u0000>A\u0001\u0000\u0000\u0000?=\u0001\u0000\u0000\u0000?@\u0001\u0000"+
		"\u0000\u0000@\n\u0001\u0000\u0000\u0000A?\u0001\u0000\u0000\u0000BC\u0005"+
		"P\u0000\u0000CD\u0005R\u0000\u0000DE\u0005O\u0000\u0000EF\u0005G\u0000"+
		"\u0000FG\u0005R\u0000\u0000GH\u0005A\u0000\u0000H\u00a0\u0005M\u0000\u0000"+
		"IJ\u0005B\u0000\u0000JK\u0005E\u0000\u0000KL\u0005G\u0000\u0000LM\u0005"+
		"I\u0000\u0000M\u00a0\u0005N\u0000\u0000NO\u0005E\u0000\u0000OP\u0005N"+
		"\u0000\u0000P\u00a0\u0005D\u0000\u0000QR\u0005F\u0000\u0000RS\u0005U\u0000"+
		"\u0000ST\u0005N\u0000\u0000TU\u0005C\u0000\u0000UV\u0005T\u0000\u0000"+
		"VW\u0005I\u0000\u0000WX\u0005O\u0000\u0000X\u00a0\u0005N\u0000\u0000Y"+
		"Z\u0005R\u0000\u0000Z[\u0005E\u0000\u0000[\\\u0005A\u0000\u0000\\\u00a0"+
		"\u0005D\u0000\u0000]^\u0005W\u0000\u0000^_\u0005R\u0000\u0000_`\u0005"+
		"I\u0000\u0000`a\u0005T\u0000\u0000a\u00a0\u0005E\u0000\u0000bc\u0005I"+
		"\u0000\u0000c\u00a0\u0005F\u0000\u0000de\u0005E\u0000\u0000ef\u0005L\u0000"+
		"\u0000fg\u0005S\u0000\u0000g\u00a0\u0005E\u0000\u0000hi\u0005E\u0000\u0000"+
		"ij\u0005N\u0000\u0000jk\u0005D\u0000\u0000kl\u0005I\u0000\u0000l\u00a0"+
		"\u0005F\u0000\u0000mn\u0005W\u0000\u0000no\u0005H\u0000\u0000op\u0005"+
		"I\u0000\u0000pq\u0005L\u0000\u0000q\u00a0\u0005E\u0000\u0000rs\u0005E"+
		"\u0000\u0000st\u0005N\u0000\u0000tu\u0005D\u0000\u0000uv\u0005W\u0000"+
		"\u0000vw\u0005H\u0000\u0000wx\u0005I\u0000\u0000xy\u0005L\u0000\u0000"+
		"y\u00a0\u0005E\u0000\u0000z{\u0005C\u0000\u0000{|\u0005O\u0000\u0000|"+
		"}\u0005N\u0000\u0000}~\u0005T\u0000\u0000~\u007f\u0005I\u0000\u0000\u007f"+
		"\u0080\u0005N\u0000\u0000\u0080\u0081\u0005U\u0000\u0000\u0081\u00a0\u0005"+
		"E\u0000\u0000\u0082\u0083\u0005B\u0000\u0000\u0083\u0084\u0005R\u0000"+
		"\u0000\u0084\u0085\u0005E\u0000\u0000\u0085\u0086\u0005A\u0000\u0000\u0086"+
		"\u00a0\u0005K\u0000\u0000\u0087\u0088\u0005R\u0000\u0000\u0088\u0089\u0005"+
		"E\u0000\u0000\u0089\u008a\u0005T\u0000\u0000\u008a\u008b\u0005U\u0000"+
		"\u0000\u008b\u008c\u0005R\u0000\u0000\u008c\u00a0\u0005N\u0000\u0000\u008d"+
		"\u008e\u0005I\u0000\u0000\u008e\u008f\u0005N\u0000\u0000\u008f\u00a0\u0005"+
		"T\u0000\u0000\u0090\u0091\u0005V\u0000\u0000\u0091\u0092\u0005O\u0000"+
		"\u0000\u0092\u0093\u0005I\u0000\u0000\u0093\u00a0\u0005D\u0000\u0000\u0094"+
		"\u0095\u0005S\u0000\u0000\u0095\u0096\u0005T\u0000\u0000\u0096\u0097\u0005"+
		"R\u0000\u0000\u0097\u0098\u0005I\u0000\u0000\u0098\u0099\u0005N\u0000"+
		"\u0000\u0099\u00a0\u0005G\u0000\u0000\u009a\u009b\u0005F\u0000\u0000\u009b"+
		"\u009c\u0005L\u0000\u0000\u009c\u009d\u0005O\u0000\u0000\u009d\u009e\u0005"+
		"A\u0000\u0000\u009e\u00a0\u0005T\u0000\u0000\u009fB\u0001\u0000\u0000"+
		"\u0000\u009fI\u0001\u0000\u0000\u0000\u009fN\u0001\u0000\u0000\u0000\u009f"+
		"Q\u0001\u0000\u0000\u0000\u009fY\u0001\u0000\u0000\u0000\u009f]\u0001"+
		"\u0000\u0000\u0000\u009fb\u0001\u0000\u0000\u0000\u009fd\u0001\u0000\u0000"+
		"\u0000\u009fh\u0001\u0000\u0000\u0000\u009fm\u0001\u0000\u0000\u0000\u009f"+
		"r\u0001\u0000\u0000\u0000\u009fz\u0001\u0000\u0000\u0000\u009f\u0082\u0001"+
		"\u0000\u0000\u0000\u009f\u0087\u0001\u0000\u0000\u0000\u009f\u008d\u0001"+
		"\u0000\u0000\u0000\u009f\u0090\u0001\u0000\u0000\u0000\u009f\u0094\u0001"+
		"\u0000\u0000\u0000\u009f\u009a\u0001\u0000\u0000\u0000\u00a0\f\u0001\u0000"+
		"\u0000\u0000\u00a1\u00a2\u0005:\u0000\u0000\u00a2\u00ac\u0005=\u0000\u0000"+
		"\u00a3\u00ac\u0007\u0005\u0000\u0000\u00a4\u00a5\u0005!\u0000\u0000\u00a5"+
		"\u00ac\u0005=\u0000\u0000\u00a6\u00ac\u0007\u0006\u0000\u0000\u00a7\u00a8"+
		"\u0005<\u0000\u0000\u00a8\u00ac\u0005=\u0000\u0000\u00a9\u00aa\u0005>"+
		"\u0000\u0000\u00aa\u00ac\u0005=\u0000\u0000\u00ab\u00a1\u0001\u0000\u0000"+
		"\u0000\u00ab\u00a3\u0001\u0000\u0000\u0000\u00ab\u00a4\u0001\u0000\u0000"+
		"\u0000\u00ab\u00a6\u0001\u0000\u0000\u0000\u00ab\u00a7\u0001\u0000\u0000"+
		"\u0000\u00ab\u00a9\u0001\u0000\u0000\u0000\u00ac\u000e\u0001\u0000\u0000"+
		"\u0000\u00ad\u00af\u0007\u0007\u0000\u0000\u00ae\u00ad\u0001\u0000\u0000"+
		"\u0000\u00af\u00b0\u0001\u0000\u0000\u0000\u00b0\u00ae\u0001\u0000\u0000"+
		"\u0000\u00b0\u00b1\u0001\u0000\u0000\u0000\u00b1\u00b2\u0001\u0000\u0000"+
		"\u0000\u00b2\u00b3\u0006\u0007\u0000\u0000\u00b3\u0010\u0001\u0000\u0000"+
		"\u0000\f\u0000\u0015\u001b &,.4?\u009f\u00ab\u00b0\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}